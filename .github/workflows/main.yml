name: Main

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows MSVC VS2022 x86,    os: windows-2022, flags: -G"Visual Studio 17 2022" -A Win32 }
          - { name: Windows MSVC VS2022 x64,    os: windows-2022, flags: -G"Visual Studio 17 2022" -A x64 }
          - { name: Windows ClangCL VS2022 x86, os: windows-2022, flags: -G"Visual Studio 17 2022" -A Win32 -T ClangCL }
          - { name: Windows ClangCL VS2022 x64, os: windows-2022, flags: -G"Visual Studio 17 2022" -A x64 -T ClangCL }
          - { name: Windows GCC Ninja,          os: windows-2022, flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -GNinja }
          - { name: Linux GCC Ninja,            os: ubuntu-22.04, flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -GNinja }
          - { name: Linux Clang Ninja,          os: ubuntu-22.04, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
          - { name: macOS Clang Ninja,          os: macos-12,     flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
          - { name: macOS Clang Xcode,          os: macos-12,     flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GXcode }
        config:
          - { name: Shared, flags: -DBUILD_SHARED_LIBS=ON }
          - { name: Static, flags: -DBUILD_SHARED_LIBS=OFF }
        type:
          - { name: Release }
          - { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake libsdl2-dev
          ninja --version
          cmake --version
          gcc --version
          clang --version

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja
          ninja --version
          cmake --version

      - name: Configure CMake
        shell: bash
        run: cmake -S . -B build -DCMAKE_INSTALL_PREFIX=install -DE2D_BUILD_EXAMPLES=ON -DE2D_BUILD_TEST_SUITE=ON ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}

      - name: Build Project
        shell: bash
        run: cmake --build build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --target install

      - name: Test
        shell: bash
        run: |
          set -e
          mkdir -p build/bin
          if [ "${{ runner.os }}" == "Windows" ]; then
            cmake --build build --target runtests --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}
          else
            ctest --test-dir build --output-on-failure -C ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}
          fi

  format:
    name: Formatting with clang-format-${{ matrix.version }}
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        version: [12, 13, 14]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: sudo apt-get install clang-format-${{ matrix.version }}

      - name: Format Code
        run: cmake -DCLANG_FORMAT_EXECUTABLE=clang-format-${{ matrix.version }} -P ./cmake/Format.cmake

      - name: Check Formatting
        run: git diff --exit-code

  tidy:
    name: Analyzing on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows, os: windows-2022, flags: -GNinja }
          - { name: Linux,   os: ubuntu-22.04, flags: -GNinja }
          - { name: macOS,   os: macos-12,     flags: -GNinja }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja cmake
          curl.exe -o run-clang-tidy https://raw.githubusercontent.com/llvm/llvm-project/llvmorg-15.0.7/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake libsdl2-dev

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja llvm || true
          echo /usr/local/opt/llvm/bin >> $GITHUB_PATH

      - name: Configure
        shell: bash
        run: cmake -S . -B build -DBUILD_SHARED_LIBS=OFF -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DE2D_BUILD_EXAMPLES=TRUE ${{matrix.platform.flags}}

      - name: Analyze Code
        shell: bash
        run: cmake --build build --target e2d-tools-tidy
