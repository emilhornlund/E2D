name: Main

on: [push, pull_request]

env:
  DISPLAY: ":99" # Display number to use for the X server

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    env:
      CMAKE_CXX_COMPILER_LAUNCHER: ccache # Use ccache to cache C++ compiler output

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows VS2022 x86,             os: windows-2022, flags: -GNinja }
          - { name: Windows VS2022 x64,             os: windows-2022, flags: -GNinja }
          - { name: Windows VS2022 ClangCL MSBuild, os: windows-2022, flags: -T ClangCL }
          - { name: Windows LLVM/Clang,             os: windows-2022, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
          - { name: Windows MinGW,                  os: windows-2022, flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -GNinja }
          - { name: Linux GCC,                      os: ubuntu-22.04, flags: -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -GNinja }
          - { name: Linux Clang,                    os: ubuntu-22.04, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
          - { name: macOS,                          os: macos-12, flags: -GNinja }
          - { name: macOS Xcode,                    os: macos-12, flags: -GXcode }
        config:
          - { name: Shared, flags: -DBUILD_SHARED_LIBS=ON }
          - { name: Static, flags: -DBUILD_SHARED_LIBS=OFF }
        type:
          - { name: Release }
          - { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug }
        include:
          - platform: { name: Windows MinGW, os: windows-2022 }
            config: { name: Static Standard Libraries, flags: -GNinja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DBUILD_SHARED_LIBS=OFF -DE2D_USE_STATIC_STD_LIBS=ON }

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Visual Studio Architecture
        if: contains(matrix.platform.name, 'Windows VS') && !contains(matrix.platform.name, 'MSBuild')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ contains(matrix.platform.name, 'x86') && 'x86' || 'x64' }}

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ runner.os == 'Windows' && '3.25' || '3.22' }}
          ninjaVersion: latest

      - name: Install Linux Dependencies and Tools
        if: runner.os == 'Linux'
        run: |
          CLANG_VERSION=$(clang++ --version | sed -n 's/.*version \([0-9]\+\)\..*/\1/p')
          echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
          sudo apt-get update && sudo apt-get install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev xvfb fluxbox ccache ${{ matrix.platform.name == 'Linux Clang' && 'llvm-$CLANG_VERSION' || '' }}

      - name: Install macOS Tools
        if: runner.os == 'macOS'
        run: |
          brew install ccache || true

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2.10
        with:
          verbose: 2
          key: ${{ matrix.platform.name }}-${{ matrix.config.name }}-${{ matrix.type.name }}

      - name: Cache MinGW
        if: matrix.platform.name == 'Windows MinGW'
        id: mingw-cache
        uses: actions/cache@v3
        with:
          path: "C:\\Program Files\\mingw64"
          key: winlibs-x86_64-posix-seh-gcc-12.2.0-llvm-16.0.0-mingw-w64msvcrt-10.0.0-r5

      - name: Install MinGW
        if: matrix.platform.name == 'Windows MinGW' && steps.mingw-cache.outputs.cache-hit != 'true'
        run: |
          curl -Lo mingw64.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/12.2.0-16.0.0-10.0.0-msvcrt-r5/winlibs-x86_64-posix-seh-gcc-12.2.0-llvm-16.0.0-mingw-w64msvcrt-10.0.0-r5.zip
          unzip -qq -d "C:\Program Files" mingw64.zip

      - name: Add MinGW to PATH and remove MinGW-supplied CCache
        if: runner.os == 'Windows'
        run: |
          echo "C:\Program Files\mingw64\bin" >> $GITHUB_PATH
          rm -f "C:\Program Files\mingw64\bin\ccache.exe"
          echo "Using $(which ccache)"
          ccache --version

      - name: Configure CMake
        run: cmake --preset dev -DCMAKE_VERBOSE_MAKEFILE=ON ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}

      - name: Build
        run: cmake --build build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --target install

      - name: Prepare Test
        run: |
          set -e
          # Start up Xvfb and fluxbox to host display tests
          if [ "${{ runner.os }}" == "Linux" ]; then
            Xvfb $DISPLAY -screen 0 1920x1080x24 &
            sleep 5
            fluxbox > /dev/null 2>&1 &
            sleep 5
          fi
          mkdir -p build/bin

      - name: Test
        if: runner.os == 'Windows'
        run: cmake --build build --target runtests --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}

      - name: Test
        if: runner.os != 'Windows'
        run: ctest --test-dir build --output-on-failure -C ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --repeat until-pass:3

      - name: Test Install
        shell: bash
        run: |
          cmake -S test/install -B test/install/build -DE2D_ROOT=build/install -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}
          cmake --build test/install/build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}

  format:
    name: Formatting
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Format Code
        run: cmake -DCLANG_FORMAT_EXECUTABLE=clang-format-14 -P cmake/Format.cmake

      - name: Check Formatting
        run: git diff --exit-code

  tidy:
    name: Analyzing on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows, os: windows-2022, flags: -GNinja }
          - { name: Linux,   os: ubuntu-22.04 }
          - { name: macOS,   os: macos-12 }

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          curl.exe -o run-clang-tidy https://raw.githubusercontent.com/llvm/llvm-project/llvmorg-15.0.7/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install llvm || true
          echo /usr/local/opt/llvm/bin >> $GITHUB_PATH

      - name: Configure
        run: cmake --preset dev -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ${{matrix.platform.flags}}

      - name: Analyze Code
        run: cmake --build build --target e2d-tools-tidy
